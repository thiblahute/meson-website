fragment_downloaded_cb({"url": "Reference-manual.html#meson-object", "fragment": "meson object \nThe meson object allows you to introspect various properties of the system. This object is always mapped in the meson variable. It has the following methods. \nget_compiler language returns an object describing a compiler takes one positional argument which is the language to use. It also accepts one keyword argument native which when set to true makes Meson return the compiler for the build machine the native compiler and when false it returns the host compiler the cross compiler If native is omitted Meson returns the cross compiler if we re currently cross compiling and the native compiler if we re not. \nbackend added returns a string representing the current backend ninja vs2010 vs2015 or xcode. \nis_cross_build returns true if the current build is a cross build and false otherwise \nis_unity returns true when doing a unity build and false otherwise \nis_subproject returns true if the current project is being built as a subproject of some other project and false otherwise \nhas_exe_wrapper returns true when doing a cross build if there is a wrapper command that can be used to execute cross built binaries for example when cross compiling from Linux to Windows one can use wine as the wrapper \nadd_install_script script_name arg1 arg2 causes the script given as an argument to be run during the install step this script will have the environment variables MESON_SOURCE_ROOT MESON_BUILD_ROOT MESON_INSTALL_PREFIX and MESON_INSTALL_DESTDIR_PREFIX set. All additional arguments are passed as parameters. \nMESON_INSTALL_PREFIX has the value of the prefix option passed to Meson and MESON_INSTALL_DESTDIR_PREFIX has both the value of DESTDIR and prefix joined together. This is useful because both are absolute paths and many path joining functions such as os.path.join in Python special case absolute paths. \nadd_postconf_script script_name arg1 arg2 will run the executable given as an argument after all project files have been generated. This script will have the environment variables MESON_SOURCE_ROOT and MESON_BUILD_ROOT set. \ncurrent_source_dir returns a string to the current source directory. Note you do not need to use this function when passing files from the current source directory to a function since that is the default. Also you can use the files function to refer to files in the current or any other source directory instead of constructing paths manually with meson.current_source_dir \ncurrent_build_dir returns a string to the current build directory \nsource_root returns a string with the absolute path to the source root directory. Note you should use the files function to refer to files in the root source directory instead of constructing paths manually with meson.source_root \nbuild_root returns a string with the absolute path to the build root directory \nproject_version returns the version string specified in project function call \nproject_name returns the project name specified in the project function call \nversion return a string with the version of Meson \nget_cross_property propname fallback_value returns the given property from a cross file the optional second argument is returned if not cross compiling or the given property is not found \ninstall_dependency_manifest output_name installs a manifest file containing a list of all subprojects their versions and license files to the file name given as the argument \n"});