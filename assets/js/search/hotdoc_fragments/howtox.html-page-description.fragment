fragment_downloaded_cb({"url": "howtox.html#page-description", "fragment": "Set default C C language version \nSet extra compiler and linker flags from the outside when e.g. building distro packages \nUse an argument only with a specific compiler \nSet a command s output to configuration \nGenerate a runnable script with configure_file \nAdd some optimization to debug builds \nUse profile guided optimization \nInstall an executable to libexecdir \nThe behaviour is the same as with other build systems with environment variables during first invocation. \nFirst check which arguments to use. \nThen use it in a target. \nIf you want to use the arguments on all targets then do this. \nconfigure_file preserves metadata so if your template file has execute permissions the generated file will have them too. \nBy default the debug build does not use any optimizations. This is the desired approach most of the time. However some projects benefit from having some minor optimizations enabled. Gcc even has a specific compiler flag Og for this. To enable its use just issue the following command. \nThis causes all subsequent builds to use this command line argument. \nUsing profile guided optimization with GCC is a two phase operation. First we set up the project with profile measurements enabled and compile it. \nThen we need to run the program with some representative input. This step depends on your project. \nOnce that is done we change the compiler flags to use the generated information and rebuild. \nAfter these steps the resulting binary is fully optimized. \nWiki home \n"});