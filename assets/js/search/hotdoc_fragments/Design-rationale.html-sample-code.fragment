fragment_downloaded_cb({"url": "Design-rationale.html#sample-code", "fragment": "Sample code \nEnough design talk let s get to the code. Before looking at the examples we would like to emphasize that this is not in any way the final code. It is proof of concept code that works in the system as it currently exists February but may change at any time. \nLet s start simple. Here is the code to compile a single executable binary. \nThis is about as simple as one can get. First you declare the project name and the languages it uses. Then you specify the binary to build and its sources. The build system will do all the rest. It will add proper suffixes e.g. exe on Windows set the default compiler flags and so on. \nUsually programs have more than one source file. Listing them all in the function call can become unwieldy. That is why the system supports keyword arguments. They look like this. \nExternal depencencies are simple to use. \nIn other build systems you have to manually add the compile and link flags from external dependencies to targets. In this system you just declare that extlibrary is mandatory and that the generated program uses that. The build system does all the plumbing for you. \nHere s a slightly more complicated definition. It should still be understandable. \nFirst we build a shared library named foobar. It is marked installable so running ninja install installs it to the library directory the system knows which one so the user does not have to care Then we build a test executable which is linked against the library. It will no tbe installed but instead it is added to the list of unit tests which can be run with the command ninja test. \nAbove we mentioned precompiled headers as a feature not supported by other build systems. Here s how you would use them. \nThe main reason other build systems can not provide pch support this easily is because they don t enforce certain best practices. Due to the way include paths work it is impossible to provide pch support that always works with both in source and out of source builds. Mandating separate build and source directories makes this and many other problems a lot easier. \n"});