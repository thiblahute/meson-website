fragment_downloaded_cb({"url": "Wrap-dependency-system-manual.html#page-description", "fragment": "Branching subprojects directly from git \nToggling between distro packages and embedded source \nThe above mentioned scheme assumes that your subproject is working off packaged files. Sometimes you want to check code out directly from Git. Meson supports this natively. All you need to do is to write a slightly different wrap file. \nThe format is straightforward. The only thing to note is the revision element that can have one of two values. The first is head which will cause Meson to track the master head doing a repull whenever the build definition is altered The second type is a commit hash. In this case Meson will use the commit specified with git checkout hash id \nNote that in this case you cannot specify an extra patch file to use. The git repo must contain all necessary Meson build definitions. \nUsually you would use subprojects as read only. However in some cases you want to do commits to subprojects and push them upstream. For these cases you can specify the upload url by adding the following at the end of your wrap file \nWhen building distro packages it is very important that you do not embed any sources. Some distros have a rule forbidding embedded dependencies so your project must be buildable without them or otherwise the packager will hate you. \nDoing this with Meson and Wrap is simple. Here s how you would use distro packages and fall back to embedding if the dependency is not available. \nBecause this is such a common operation Meson provides a shortcut for this use case. \nThe fallback keyword argument takes two items the name of the subproject and the name of the variable that holds the dependency. If you need to do something more complicated such as extract several different variables then you need to do it yourself with the manual method described above. \nWith this setup when foobar is provided by the system we use it. When that is not the case we use the embedded version. Note that foobar_dep can point to an external or an internal dependency but you don t have to worry about their differences. Meson will take care of the details for you. \n"});