fragment_downloaded_cb({"url": "Wrap-dependency-system-manual.html#how-it-works", "fragment": "How it works \nMeson has a concept of subprojects. They are a way of nesting one Meson project inside another. Any project that builds with Meson can detect that it is built as a subproject and build itself in a way that makes it easy to use usually this means as a static library \nTo use this kind of a project as a dependency you could just copy and extract it inside your project s subprojects directory. However there is a simpler way. You can specify a Wrap file that tells Meson how to download it for you. An example wrap file would look like this and should be put in subprojects foobar.wrap \nIf you then use this subproject in your build Meson will automatically download and extract it during build. This makes subproject embedding extremely easy. \nUnfortunately most software projects in the world do not build with Meson. Because of this Meson allows you to specify a patch url. This works in much the same way as Debian s distro patches. That is they are downloaded and automatically applied to the subproject. These files contain a Meson build definition for the given subproject. A wrap file with an additional patch url would look like this. \nIn this example the Wrap manager would download the patch and unzip it in libfoobar s directory. \nThis approach makes it extremely simple to embed dependencies that require build system changes. You can write the Meson build definition for the dependency in total isolation. This is a lot better than doing it inside your own source tree especially if it contains hundreds of thousands of lines of code. Once you have a working build definition just zip up the Meson build files and others you have changed and put them somewhere where you can download them. \n"});