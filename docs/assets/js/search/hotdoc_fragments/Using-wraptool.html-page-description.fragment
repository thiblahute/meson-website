fragment_downloaded_cb({"url": "Using-wraptool.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Using-wraptool.md\">\n<h1 id=\"using-wraptool\">Using wraptool</h1>\n<p>Wraptool is a helper tool that allows you to manage your source dependencies using the Wrapdb database. It gives you all things you would expect, such as installing and updating dependencies. The wrap tool works on all platforms, the only limitation is that the wrap definition works on your target platform. If you find some Wraps that don't work, please file bugs or, even better, patches.</p>\n<p>All code examples here assume that you are running the commands in your top level source directory. Lines that start with the <code>#</code> mark are commands to type.</p>\n<h2 id=\"simple-querying\">Simple querying</h2>\n<p>The simplest operation to do is to query the list of packages available. To list them all issue the following command:</p>\n<pre><code># wraptool list\nbox2d\nenet\ngtest\nlibjpeg\nliblzma\nlibpng\nlibxml2\nlua\nogg\nsqlite\nvorbis\nzlib\n</code></pre>\n<p>Usually you want to search for a specific package. This can be done with the <code>search</code> command:</p>\n<pre><code># wraptool search jpeg\nlibjpeg\n</code></pre>\n<p>To determine which versions of libjpeg are available to install, issue the <code>info</code> command:</p>\n<pre><code># wraptool info libjpeg\nAvailable versions of libjpeg:\n  9a 2\n</code></pre>\n<p>The first number is the upstream release version, in this case <code>9a</code>. The second number is the Wrap revision number. They don't relate to anything in particular, but larger numbers imply newer releases. You should always use the newest available release.</p>\n<h2 id=\"installing-dependencies\">Installing dependencies</h2>\n<p>Installing dependencies is just as straightforward. First just create the <code>subprojects</code> directory at the top of your source tree and issue the install command.</p>\n<pre><code># wraptool install libjpeg\nInstalled libjpeg branch 9a revision 2\n</code></pre>\n<p>Now you can issue a <code>subproject('libjpeg')</code> in your <code>meson.build</code> file to use it.</p>\n<p>To check if your projects are up to date you can issue the <code>status</code> command.</p>\n<pre><code># wraptool status\nSubproject status\n libjpeg up to date. Branch 9a, revision 2.\n zlib not up to date. Have 1.2.8 2, but 1.2.8 4 is available.\n</code></pre>\n<p>In this case <code>zlib</code> has a newer release available. Updating it is straightforward:</p>\n<pre><code># wraptool.py update zlib\nUpdated zlib to branch 1.2.8 revision 4\n</code></pre>\n<p>Wraptool can do other things besides these. Documentation for these can be found in the command line help, which can be accessed by <code>wraptool --help</code>.</p>\n\n</div>\n\n\n        "});