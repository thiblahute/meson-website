fragment_downloaded_cb({"url": "Release-notes-for-0-37-0.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Release-notes-for-0.37.0.md\">\n<h1 id=\"new-features\">New features</h1>\n<h2 id=\"mesontest\">Mesontest</h2>\n<p>Mesontest is a new testing tool that allows you to run your tests in many different ways. As an example you can run tests multiple times:</p>\n<pre><code>mesontest --repeat=1000 a_test\n</code></pre>\n<p>or with an arbitrary wrapper executable:</p>\n<pre><code>mesontest --wrap='valgrind --tool=helgrind' a_test\n</code></pre>\n<p>or under gdb, 1000 times in a row. This is handy for tests that fail spuriously, as when the crash happens you are given the full GDB command line:</p>\n<pre><code>mesontest --repeat=1000 --gdb a_test\n</code></pre>\n<h2 id=\"mesonrewriter\">Mesonrewriter</h2>\n<p>Mesonrewrite is an experimental tool to manipulate your build definitions programmatically. It is not installed by default yet but those interested can run it from the source repository.</p>\n<p>As an example, here is how you would add a source file to a build target:</p>\n<pre><code>mesonrewriter add --target=program --filename=new_source.c\n</code></pre>\n<h2 id=\"shared-modules\">Shared modules</h2>\n<p>The new <code>shared_module</code> function allows the creation of shared modules, that is, extension modules such as plugins that are meant to be used solely with <code>dlopen</code> rather than linking them to targets.</p>\n<h2 id=\"gnome-module\">Gnome module</h2>\n<ul>\n<li>Detect required programs and print useful errors if missing</li>\n</ul>\n<h3 id=\"gtkdoc\">gtkdoc</h3>\n<ul>\n<li>Allow passing a list of directories to <code>src_dir</code> kwarg</li>\n<li>Add <code>namespace</code> kwarg</li>\n<li>Add <code>mode</code> kwarg</li>\n<li>Fix <code>gtkdoc-scangobj</code> finding local libraries</li>\n</ul>\n<h3 id=\"compile_resources\">compile_resources</h3>\n<ul>\n<li>Add <code>gresource_bundle</code> kwarg to output <code>.gresource</code> files</li>\n<li>Add <code>export</code> and <code>install_header</code> kwargs</li>\n<li>Use depfile support available in GLib &gt;= 2.52.0</li>\n</ul>\n<h2 id=\"i18n-module\">i18n module</h2>\n<ul>\n<li>Add <code>merge_file()</code> function for creating translated files</li>\n<li>Add <code>preset</code> kwarg to included common gettext flags</li>\n<li>Read languages from <code>LINGUAS</code> file</li>\n</ul>\n<h2 id=\"llvm-ir-compilation\">LLVM IR compilation</h2>\n<p>Meson has long had support for compiling assembler (GAS) files. In this release we add support for compiling LLVM IR files in a similar way when building with the Clang compiler. Just add it to the list of files when creating a <code>library</code> or <code>executable</code> target like any other source file. No special handling is required:</p>\n<pre><code class=\"language-meson\">executable('some-exe', 'main.c', 'asm-file.S', 'ir-file.ll')\n</code></pre>\n<p>As always, you can also mix LLVM IR files with C++, C, and Assembly (GAS) sources.</p>\n<h2 id=\"vim-indent-and-syntax-files\">ViM indent and syntax files</h2>\n<p>We now include filetype, indent, and syntax files for ViM <a href=\"https://github.com/mesonbuild/meson/tree/master/syntax-highlighting/vim\">with the source tree</a>. Please file issues (or pull requests!) for enhancements or if you face any problems using them.</p>\n<h2 id=\"push-urls-in-wrap-files\">Push URLs in .wrap files</h2>\n<p><a href=\"Using-the-WrapDB.html\">.wrap files</a> for subprojects can now include a separate push URL to allow developers to push changes directly from a subproject git checkout.</p>\n<h2 id=\"pkgconfig-dependencies\">pkg-config dependencies</h2>\n<p>Meson now supports multiple version restrictions while searching for pkg-config dependencies.</p>\n<pre><code class=\"language-meson\"># Just want a lower limit\ndependency('zlib', version : '&gt;1.2.1')\n# Want both a lower and an upper limit\ndependency('opencv', version : ['&gt;=2.3.0', '&lt;=3.1.0'])\n# Want to exclude one specific broken version\ndependency('foolite', version : ['&gt;=3.12.1', '!=3.13.99'])\n</code></pre>\n<h2 id=\"overriding-more-binaries-with-environment-variables\">Overriding more binaries with environment variables</h2>\n<p>You can now specify the binary to be used for the following tools by setting the corresponding environment variable</p>\n<table>\n<thead>\n<tr>\n<th> Name</th>\n<th> Environment variable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> pkg-config</td>\n<td> PKG_CONFIG</td>\n</tr>\n<tr>\n<td> readelf</td>\n<td> READELF</td>\n</tr>\n<tr>\n<td> nm</td>\n<td> NM</td>\n</tr></tbody></table>\n<h2 id=\"support-for-localstatedir\">Support for <code>localstatedir</code></h2>\n<p>Similar to other options such as <code>bindir</code> and <code>datadir</code>, you can now specify the <code>localstatedir</code> for a project by passing <code>--localstatedir=dir</code> to <code>meson</code> or <code>-Dlocalstatedir=dir</code> to <code>mesonconf</code> after configuration. You can also access it from inside the <code>meson.build</code> file with <code>get_option('localstatedir')</code>.</p>\n<h2 id=\"new-compiler-function-symbols_have_underscore_prefix\">New compiler function <code>symbols_have_underscore_prefix</code></h2>\n<p>Checks if the compiler prefixes an underscore to C global symbols with the default calling convention. This is useful when linking to compiled assembly code, or other code that does not have its C symbol mangling handled transparently by the compiler.</p>\n<pre><code class=\"language-meson\">cc = meson.get_compiler('c')\nconf = configuration_data()\nif cc.symbols_have_underscore_prefix()\n    conf.set('SYMBOLS_HAVE_UNDERSCORE', true)\nendif\n</code></pre>\n<p>C symbol mangling is platform and architecture dependent, and a helper function is needed to detect it. Eg: Windows 32-bit prefixes underscore, but 64-bit does not. Linux does not prefix an underscore but OS X does.</p>\n<h2 id=\"vala\">Vala</h2>\n<p>Glib Resources compiled with <a href=\"Gnome-module.html#compile_resources\"><code>gnome.compile_resources</code></a> that are added to the sources of a Vala build target will now cause the appropriate <code>--gresources</code> flag to be passed to the Vala compiler so you don't need to add that yourself to <code>vala_args:</code>.</p>\n<h2 id=\"improvements-to-install-scripts\">Improvements to install scripts</h2>\n<p>You can now pass arguments to install scripts added with <a href=\"Reference-manual.html#meson-object\"><code>meson.add_install_script()</code></a>. All arguments after the script name will be passed to the script.</p>\n<p>The <code>MESON_INSTALL_DESTDIR_PREFIX</code> environment variable is now set when install scripts are called. This contains the values of the <code>DESTDIR</code> environment variable and the <code>prefix</code> option passed to Meson joined together. This is useful because both those are usually absolute paths, and joining absolute paths in a cross-platform way is tricky. <a href=\"https://docs.python.org/3/library/os.path.html#os.path.join\"><code>os.path.join</code> in Python</a> will discard all previous path segments when it encounters an absolute path, and simply concatenating them will not work on Windows where absolute paths begin with the drive letter.</p>\n<h2 id=\"more-install-directories\">More install directories</h2>\n<p>Added new options <code>sbindir</code> and <code>infodir</code> that can be used for installation.</p>\n\n</div>\n\n\n        "});