fragment_downloaded_cb({"url": "Tutorial.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Tutorial.md\">\n<h1 id=\"tutorial\">Tutorial</h1>\n<p>This page shows from the ground up how to create a Meson build definition for a simple project. Then we expand it to use external dependencies to show how easily they can be integrated into your project.</p>\n<h2 id=\"the-humble-beginning\">The humble beginning</h2>\n<p>Let's start with the most basic of programs, the classic hello example. First we create a file <code>main.c</code> which holds the source. It looks like this.</p>\n<pre><code class=\"language-c\">#include&lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n  printf(\"Hello there.\\n\");\n  return 0;\n}\n</code></pre>\n<p>Then we create a Meson build description and put it in a file called <code>meson.build</code> in the same directory. Its contents are the following.</p>\n<pre><code class=\"language-meson\">project('tutorial', 'c')\nexecutable('demo', 'main.c')\n</code></pre>\n<p>That is all. We are now ready to build our application. First we need to initialise the build by going into the source directory and issuing the following commands.</p>\n<pre><code class=\"language-console\">$ meson build\n</code></pre>\n<p>We create a separate build directory to hold all of the compiler output. Meson is different from some other build systems in that it does not permit in-source builds. You must always create a separate build directory. Common convention is to put the default build directory in a subdirectory of your toplevel source directory.</p>\n<p>When Meson is run it prints the following output.</p>\n<pre><code>The Meson build system\n version: 0.13.0-research\nSource dir: /home/jpakkane/mesontutorial\nBuild dir: /home/jpakkane/mesontutorial/build\nBuild type: native build\nProject name is \"tutorial\".\nUsing native c compiler \"ccache cc\". (gcc 4.8.2)\nCreating build target \"demo\" with 1 files.\n</code></pre>\n<p>Now we are ready to build our code.</p>\n<pre><code>$ cd build\n$ ninja\n</code></pre>\n<p>Once that is done we can run the resulting binary.</p>\n<pre><code class=\"language-console\">$ ./demo\n</code></pre>\n<p>This produces the expected output.</p>\n<pre><code>Hello there.\n</code></pre>\n<h2 id=\"adding-dependencies\">Adding dependencies</h2>\n<p>Just printing text is a bit old fashioned. Let's update our program to create a graphical window instead. We'll use the <a href=\"https://gtk.org\">GTK+</a> widget toolkit. First we edit the main file to use Gtk. The new version looks like this.</p>\n<pre><code class=\"language-c\">#include&lt;gtk/gtk.h&gt;\n\nint main(int argc, char **argv) {\n  GtkWidget *win;\n  gtk_init(&amp;argc, &amp;argv);\n  win = gtk_window_new(GTK_WINDOW_TOPLEVEL);\n  gtk_window_set_title(GTK_WINDOW(win), \"Hello there\");\n  g_signal_connect(win, \"destroy\", G_CALLBACK(gtk_main_quit), NULL);\n  gtk_widget_show(win);\n  gtk_main();\n}\n</code></pre>\n<p>Then we edit the Meson file, instructing it to find and use the Gtk libraries.</p>\n<pre><code class=\"language-meson\">project('tutorial', 'c')\ngtkdep = dependency('gtk+-3.0')\nexecutable('demo', 'main.c', dependencies : gtkdep)\n</code></pre>\n<p>Now we are ready to build. The thing to notice is that we do <em>not</em> need to recreate our build directory, run any sort of magical commands or the like. Instead we just type the exact same command as if we were rebuilding our code without any build system changes.</p>\n<pre><code>$ ninja\n</code></pre>\n<p>Once you have set up your build directory the first time, you don't ever need to run the <code>meson</code> command again. You always just run <code>ninja</code>. Meson will automatically detect when you have done changes to build definitions and will take care of everything so users don't have to care. In this case the following output is produced.</p>\n<pre><code>[1/1] Regenerating build files\nThe Meson build system\n version: 0.13.0-research\nSource dir: /home/jpakkane/mesontutorial\nBuild dir: /home/jpakkane/mesontutorial/build\nBuild type: native build\nProject name is \"tutorial\".\nUsing native c compiler \"ccache cc\". (gcc 4.8.2)\nFound pkg-config version 0.26.\nDependency gtk+-3.0 found: YES\nCreating build target \"demo\" with 1 files.\n[1/2] Compiling c object demo.dir/main.c.o\n[2/2] Linking target demo\n</code></pre>\n<p>Note how Meson noticed that the build definition has changed and reran itself automatically. The program is now ready to be run:</p>\n<pre><code>$ ./demo\n</code></pre>\n<p>This creates the following GUI application.</p>\n<p><img src=\"images/gtksample.png\" alt=\"Gtk sample application screenshot\" id=\"gtk-sample-application-screenshot\"></p>\n\n</div>\n\n\n        "});