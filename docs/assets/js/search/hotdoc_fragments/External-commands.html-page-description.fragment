fragment_downloaded_cb({"url": "External-commands.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"External-commands.md\">\n<h1 id=\"external-commands\">External commands</h1>\n<p>As a part of the software configuration, you may want to get extra data by running external commands. The basic syntax is the following.</p>\n<pre><code class=\"language-meson\">r = run_command('command', 'arg1', 'arg2', 'arg3')\nif r.returncode() != 0\n  # it failed\nendif\noutput = r.stdout().strip()\nerrortxt = r.stderr().strip()\n</code></pre>\n<p>The <code>run_command</code> function returns an object that can be queried for return value and text written to stdout and stderr. The <code>strip</code> method call is used to strip trailing and leading whitespace from strings. Usually output from command line programs ends in a newline, which is unwanted in string variables. The first argument can be either a string or an executable you have detected earlier with <code>find_program</code>.</p>\n<p>Note that you can not pass your command line as a single string. That is, calling <code>run_command('do_something foo bar')</code> will not work. You must either split up the string into separate arguments or pass the split command as an array. It should also be noted that Meson will not pass the command to the shell, so any command lines that try to use things such as environment variables, backticks or pipelines will not work. If you require shell semantics, write your command into a script file and call that with <code>run_command</code>.</p>\n\n</div>\n\n\n        "});