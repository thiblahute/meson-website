fragment_downloaded_cb({"url": "Simple-comparison.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Simple-comparison.md\">\n<h1 id=\"a-simple-comparison\">A simple comparison</h1>\n<p>In this experiment we generated one thousand C files with contents that looked like this.</p>\n<pre><code class=\"language-c\">#include&lt;stdio.h&gt;\n#include\"header.h\"\n\nint func23() { return 0; }\n</code></pre>\n<p>The function number was different in each file. In addition there was a main C file that just called each function in turn. We then generated build system files for <em>Meson</em>, <em>CMake</em>, <em>SCons</em>, <em>Premake</em> and <em>Autotools</em> that compiled these files into a single executable.</p>\n<p>With this we measured three different things. The first is configuration time, that is, the time the build system takes to generate necessary build files. This is usually called the <em>configure step</em>. The time was measured in seconds.</p>\n<p>The second thing to measure was the build time. This should be limited by the compiler and in the optimal case should be the same for every build system. Four parallel processes were used in this test.</p>\n<p>The third thing we measured was the empty build time. This measures how much time the build system takes to check the states of all source files because if any of them could potentially cause a rebuild.</p>\n<p>Since CMake has two different backends, Make and Ninja, we ran the tests on both of them. All tests were run on a 2011 era Macbook Pro running Ubuntu 13/04. The tests were run multiple times and we always took the fastest time.</p>\n<p>Here are the results for configuration time.</p>\n<p><img src=\"images/conftime.png\" alt=\"Configuration times\" id=\"configuration-times\"></p>\n<p>The reason SCons got zero seconds on this test is because you cannot separate configure and build steps. They run as one unit. Autotools is the clear loser of this test as it is over an order of magnitude slower than the second slowest one. This configuration time includes both autogen and configure. All other systems take less than one second to do this setup, which is fast enough for a human being to interpret as instantaneous.</p>\n<p><img src=\"https://raw.githubusercontent.com/wiki/jpakkane/meson/buildtime.png\" alt=\"Build times\" id=\"build-times\"></p>\n<p>Build times are a bit more even. SCons is the slowest, being almost ten seconds slower than the second slowest. Some of it is work from the configure step but it still has the worst performance. Premake is the fastest Make-based build system narrowly beating out Autotools. Both Ninja-based build systems are faster than all non-Ninja ones with Meson being slightly faster. In practice the difference is minimal. The advantages of Ninja can be seen by comparing CMake's times when using Make or Ninja. It is possible to shave off 3.5 seconds (over 20%) of the total build time just by changing the backend. The project's CMake configuration files don't need any changes.</p>\n<p><img src=\"https://raw.githubusercontent.com/wiki/jpakkane/meson/emptytime.png\" alt=\"No-op time\" id=\"noop-time\"></p>\n<p>Empty build times reflect the performance of regular build times. SCons is again the slowest taking over three seconds compared to Meson, which takes only 0.03 seconds, a difference of two orders of magnitude. Even Autotools, the fastest Make-based system, is almost one order of magnitude slower. Ninja holds the top spots just like in the previous test.</p>\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>Build system performance matters. Even with this extremely simple example we can find differences between various popular build systems. As the project size increases, these differences grow even larger. (The author has witnessed no-op build times of 30 seconds for Make versus less than one second for Ninja when compiling the Clang compiler.) Keeping incremental build times low is one of the major keys of programmer productivity as it allows developers to iterate faster and stay in the creative zone.</p>\n<h2 id=\"original-scripts\">Original scripts</h2>\n<p>Those who want to run these experiments themselves can download the scripts here:</p>\n<ul>\n<li><a href=\"https://raw.githubusercontent.com/wiki/jpakkane/meson/gen_src.py\">Generator script</a></li>\n<li><a href=\"https://raw.githubusercontent.com/wiki/jpakkane/meson/measure.py\">Measurement script</a></li>\n</ul>\n\n</div>\n\n\n        "});