fragment_downloaded_cb({"url": "Installing.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Installing.md\">\n<h1 id=\"installing\">Installing</h1>\n<p>By default Meson will not install anything. Build targets can be installed by tagging them as installable in the definition.</p>\n<pre><code class=\"language-meson\">project('install', 'c')\nshared_library('mylib', 'libfile.c', install : true)\n</code></pre>\n<p>There is usually no need to specify install paths or the like. Meson\nwill automatically install it to the standards-conforming location. In\nthis particular case the executable is installed to the <code>bin</code>\nsubdirectory of the install prefix. However if you wish to override the\ninstall dir, you can do that with the <code>install_dir</code> argument.</p>\n<pre><code class=\"language-meson\">executable('prog', 'prog.c', install : true, install_dir : 'my/special/dir')\n</code></pre>\n<p>Other install commands are the following.</p>\n<pre><code class=\"language-meson\">install_headers('header.h', subdir : 'projname') # -&gt; include/projname/header.h\ninstall_man('foo.1') # -&gt; share/man/man1/foo.1.gz\ninstall_data('datafile.cat', install_dir : join_paths(get_option('datadir'), 'progname')) # -&gt; share/progname/datafile.dat\n</code></pre>\n<p>Sometimes you want to copy an entire subtree directly. For this use case there is the <code>install_subdir</code> command, which can be used like this.</p>\n<pre><code class=\"language-meson\">install_subdir('mydir', install_dir : 'include') # mydir subtree -&gt; include/mydir\n</code></pre>\n<p>Most of the time you want to install files relative to the install\nprefix. Sometimes you need to go outside of the prefix (such as writing\nfiles to <code>/etc</code> instead of <code>/usr/etc</code>. This can be accomplished by\ngiving an absolute install path.</p>\n<pre><code class=\"language-meson\">install_data(sources : 'foo.dat', install_dir : '/etc') # -&gt; /etc/foo.dat\n</code></pre>\n<h2 id=\"custom-install-behaviour\">Custom install behaviour</h2>\n<p>Sometimes you need to do more than just install basic targets. Meson makes this easy by allowing you to specify a custom script to execute at install time. As an example, here is a script that generates an empty file in a custom directory.</p>\n<pre><code class=\"language-bash\">#!/bin/sh\n\nmkdir \"${DESTDIR}/${MESON_INSTALL_PREFIX}/mydir\"\ntouch \"${DESTDIR}/${MESON_INSTALL_PREFIX}/mydir/file.dat\"\n</code></pre>\n<p>As you can see, Meson sets up some environment variables to help you write your script (<code>DESTDIR</code> is not set by Meson, it is inherited from the outside environment). In addition to the install prefix, Meson also sets the variables <code>MESON_SOURCE_ROOT</code> and <code>MESON_BUILD_ROOT</code>.</p>\n<p>Telling Meson to run this script at install time is a one-liner.</p>\n<pre><code class=\"language-meson\">meson.set_install_script('myscript.sh')\n</code></pre>\n<p>The argument is the name of the script file relative to the current subdirectory.</p>\n<h2 id=\"destdir-support\">DESTDIR support</h2>\n<p>Sometimes you need to install to a different directory than the install prefix. This is most common when building rpm or deb packages. This is done with the <code>DESTDIR</code> environment variable and it is used just like with other build systems:</p>\n<pre><code class=\"language-console\">$ DESTDIR=/path/to/staging/area ninja install\n</code></pre>\n\n</div>\n\n\n        "});