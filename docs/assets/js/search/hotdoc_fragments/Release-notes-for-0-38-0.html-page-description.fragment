fragment_downloaded_cb({"url": "Release-notes-for-0-38-0.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Release-notes-for-0.38.0.md\">\n<h1 id=\"uninstall-target\">Uninstall target</h1>\n<p>Meson allows you to uninstall an install step by invoking the uninstall target. This will remove all files installed as part of install. Note that this does not restore the original files. This also does not undo changes done by custom install scripts (because they can do arbitrary install operations).</p>\n<h1 id=\"support-for-arbitrary-test-setups\">Support for arbitrary test setups</h1>\n<p>Sometimes you need to run unit tests with special settings. For example under Valgrind. Usually this requires extra command line options for the tool. This is supported with the new <em>test setup</em> feature. For example to set up a test run with Valgrind, you'd write this in a <code>meson.build</code> file:</p>\n<pre><code class=\"language-meson\">add_test_setup('valgrind',\n  exe_wrapper : [vg, '--error-exitcode=1', '--leak-check=full'],\n  timeout_multiplier : 100)\n</code></pre>\n<p>This tells Meson to run tests with Valgrind using the given options and multiplying the test timeout values by 100. To run this test setup simply issue the following command:</p>\n<pre><code class=\"language-console\">$ mesontest --setup=valgrind\n</code></pre>\n<h1 id=\"intel-cc-compiler-support\">Intel C/C++ compiler support</h1>\n<p>As usual, just set <code>CC=icc CXX=icpc</code> and Meson will use it as the C/C++ compiler. Currently only Linux is supported.</p>\n<h1 id=\"get-values-from-configuration-data-objects\">Get values from configuration data objects</h1>\n<p>Now it is possible to query values stored in configuration data objects.</p>\n<pre><code class=\"language-meson\">cdata.set('key', 'value')\ncdata.get('key') # returns 'value'\ncdata.get('nokey', 'default') # returns 'default'\ncdata.get('nokey') # halts with an error\n</code></pre>\n<h1 id=\"python-3-module-support\">Python 3 module support</h1>\n<p>Building Python 3 extension modules has always been possible, but it is now even easier:</p>\n<pre><code class=\"language-meson\">py3_mod = import('python3')\npylib = py3_mod.extension_module('modname',\n  'modsource.c',\n  dependencies : py3_dep)\n</code></pre>\n<h1 id=\"default-options-to-subprojects\">Default options to subprojects</h1>\n<p>Projects can specify overriding values for subprojects' <code>default_options</code> when invoking a subproject:</p>\n<pre><code class=\"language-meson\">subproject('foo', default_options : ['optname=overridevalue'])\ndependency('some-dep', fallback : ['some_subproject', 'some_dep'], default_options : ['optname=overridevalue'])\n</code></pre>\n<p>The effect is the same as if the default options were written in the subproject's <code>project</code> call.</p>\n<h1 id=\"set-targets-to-be-built-or-not-by-default\">Set targets to be built (or not) by default</h1>\n<p>Build targets got a new keyword <code>build_by_default</code> which tells whether the target should be built by default when running e.g. <code>ninja</code>. Custom targets are not built by default but other targets are. Any target that is tagged as installed or to be built always is also built by default, regardless of the value of this keyword.</p>\n<h1 id=\"add-option-to-mesonconf-to-wipe-cached-data\">Add option to mesonconf to wipe cached data.</h1>\n<p>Meson caches the results of depencency lookups. Sometimes these may get out of sync with the system state. Mesonconf now has a <code>--clearcache</code> option to clear these values so they will be re-searched from the system upon next compile.</p>\n<h1 id=\"can-specify-file-permissions-and-owner-when-installing-data\">Can specify file permissions and owner when installing data</h1>\n<p>The new <code>install_mode</code> keyword argument can be used to specify file permissions and uid/gid of files when doing the install. This allows you to, for example, install suid root scripts.</p>\n<h1 id=\"has_header-checks-are-now-faster\"><code>has_header()</code> checks are now faster</h1>\n<p>When using compilers that implement the <a href=\"https://clang.llvm.org/docs/LanguageExtensions.html#include-file-checking-macros\"><code>__has_include()</code> preprocessor macro</a>, the check is now ~40% faster.</p>\n<h1 id=\"array-indexing-now-supports-fallback-values\">Array indexing now supports fallback values</h1>\n<p>The second argument to the array <a href=\"https://github.com/mesonbuild/meson/wiki/Reference-manual#array-object\"><code>.get()</code></a> function is now returned if the specified index could not be found</p>\n<pre><code class=\"language-meson\">array = [10, 11, 12, 13]\narray.get(0) # this will return `10`\narray.get(4) # this will give an error about invalid index\narray.get(4, 0) # this will return `0`\n</code></pre>\n<h1 id=\"silent-mode-for-mesontest\">Silent mode for Mesontest</h1>\n<p>The Meson test executor got a new argument <code>-q</code> (and <code>--quiet</code>) that suppresses all output of successful tests. This makes interactive usage nicer because only errors are printed.</p>\n\n</div>\n\n\n        "});