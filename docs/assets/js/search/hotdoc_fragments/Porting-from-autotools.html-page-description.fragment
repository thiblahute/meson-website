fragment_downloaded_cb({"url": "Porting-from-autotools.html#page-description", "fragment": "<div id=\"page-description\" data-hotdoc-source=\"Porting-from-autotools.md\">\n<h1 id=\"porting-from-autotools\">Porting from autotools</h1>\n<p>This page uses <a href=\"https://github.com/hughsie/appstream-glib/\">appstream-glib</a> as an example project. Appstream-Glib contains some libraries, gobject-introspection, tests, man pages, i18n, bash-completion with optional flags to build/notbuild support for some things.</p>\n<p>Meson comes with a helper script <code>ac_converter</code> that you can use to convert the basic autoconf checks for your project.</p>\n<h2 id=\"configureac\">Configure.ac</h2>\n<p>First let's look at <code>configure.ac</code> and write the same in <code>meson.build</code>.</p>\n<pre><code class=\"language-autoconf\">AC_PREREQ(2.63)\n</code></pre>\n<p>Meson doesn't provide the same function, so just ignore this.</p>\n<h3 id=\"defining-variables\">Defining variables</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">m4_define([as_major_version], [0])\nm4_define([as_minor_version], [3])\nm4_define([as_micro_version], [6])\nm4_define([as_version],\n          [as_major_version.as_minor_version.as_micro_version])\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">\nas_version = meson.project_version() # set in project() below\nver_arr = as_version.split('.')\n\nas_major_version = ver_arr[0]\nas_minor_version = ver_arr[1]\nas_micro_version = ver_arr[2]\n</code></pre>\n<h3 id=\"initializing-project-and-setting-compilers\">Initializing project and setting compilers</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">AC_INIT([appstream-glib],[as_version])\nAC_PROG_CC\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">project('appstream-glib', 'c', version : '0.3.6')\n</code></pre>\n<p>Note that this must be the first line of your <code>meson.build</code> file.</p>\n<h3 id=\"ac_subst\">AC_SUBST</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">AC_SUBST(AS_MAJOR_VERSION)\nAC_SUBST(AS_MINOR_VERSION)\nAC_SUBST(AS_MICRO_VERSION)\nAC_SUBST(AS_VERSION)\n</code></pre>\n<p>You don't need to do the same in Meson, because it does not have two different types of files (Makefile, configure).</p>\n<h3 id=\"auto-headers\">Auto headers</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">AC_CONFIG_HEADERS([config.h])\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">conf = configuration_data()\n# Surround the version in quotes to make it a C string\nconf.set_quoted('VERSION', as_version)\nconfigure_file(output : 'config.h',\n               configuration : conf)\n</code></pre>\n<p>Meson doesn't support autoheaders, you need to manually specify what do you want to see in header file, write <code>configuration_data()</code> object and use <code>configure_file()</code>.</p>\n<p>You can also substitute variables of type <code>@SOME_VAR@</code> with configure data. The details are on the <a href=\"Configuration.html\">configuration page</a>.</p>\n<h3 id=\"finding-programs\">Finding programs</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">AC_PATH_PROG(GPERF, [gperf], [no])\nif test x$GPERF != xno ; then\n        AC_DEFINE(HAVE_GPERF,[1], [Use gperf])\nfi\nAM_CONDITIONAL(HAVE_GPERF, [test x$GPERF != xno])\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">gperf = find_program('gperf', required : false)\nif gperf.found()\n  conf.set('HAVE_GPERF', 1)\nendif\n</code></pre>\n<h3 id=\"finding-pkgconfig-modules\">Finding pkgconfig modules</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">PKG_CHECK_MODULES(SOUP, libsoup-2.4 &gt;= 2.24)\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">soup = dependency('libsoup-2.4', version : '&gt;= 2.24')\n</code></pre>\n<h3 id=\"arguments\">Arguments</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-autoconf\">AC_ARG_ENABLE(dep11, AS_HELP_STRING([--enable-dep11],[enable DEP-11]),\n              enable_dep11=$enableval,enable_dep11=yes)\nAM_CONDITIONAL(HAVE_DEP11, test x$enable_dep11 = xyes)\nif test x$enable_dep11 = xyes; then\n  AC_CHECK_HEADER(yaml.h, [], [AC_MSG_ERROR([No yaml.h])])\n  YAML_LIBS=\"-lyaml\"\n  AC_SUBST(YAML_LIBS)\n  AC_DEFINE(AS_BUILD_DEP11,1,[Build DEP-11 code])\nfi\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">if get_option('enable-dep11')\n  yaml = dependency('yaml-0.1')\n  conf.set('AS_BUILD_DEP11', 1)\nelse\n  yaml = dependency('yaml-0.1', required : false)\nendif\n</code></pre>\n<p><code>meson_options.txt</code>:</p>\n<pre><code class=\"language-meson\">option('enable-dep11', type : 'boolean', value : true, description : 'enable DEP-11')\n</code></pre>\n<h2 id=\"makefileam\">Makefile.am</h2>\n<p>Next step is <code>Makefile.am</code>. In meson you don't need to have other file, you still use <code>meson.build</code>.</p>\n<h3 id=\"sub-directories\">Sub directories</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">SUBDIRS =                                         \\\n        libappstream-glib\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">subdir('libappstream-glib')\n</code></pre>\n<h3 id=\"cleanfiles-extra_dist-etc\">*CLEANFILES, EXTRA_DIST, etc.</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">DISTCLEANFILES =                                        \\\n        appstream-glib-*.tar.xz\n\nMAINTAINERCLEANFILES =                                  \\\n        *~                                              \\\n        ABOUT-NLS                                       \\\n        aclocal.m4                                      \\\n        ChangeLog                                       \\\n        compile                                         \\\n        config.guess                                    \\\n        config.h.*                                      \\\n        config.rpath\n\nEXTRA_DIST =                                            \\\n        COPYING                                         \\\n        MAINTAINERS                                     \\\n        AUTHORS                                         \\\n        README.md                                       \\\n        NEWS                                            \\\n        autogen.sh                                      \\\n        config.h\n</code></pre>\n<p>In Meson you don't need have <code>*CLEANFILES</code>, because in meson you are building in temporary directory (usually called <code>build</code>), you manually removing it. You also not need to use <code>EXTRA_DIST</code>, because you will make tarballs via <code>git archive</code> or something like this.</p>\n<h3 id=\"glibcompileresources\">glib-compile-resources</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">as-resources.c: appstream-glib.gresource.xml                    \\\n                as-stock-icons.txt                              \\\n                as-license-ids.txt                              \\\n                as-blacklist-ids.txt                            \\\n                as-category-ids.txt                             \\\n                as-environment-ids.txt\n        $(AM_V_GEN)                                             \\\n        glib-compile-resources                                  \\\n                --sourcedir=$(srcdir)                           \\\n                --sourcedir=$(top_builddir)/data                \\\n                --target=$@                                     \\\n                --generate-source                               \\\n                --c-name as                                     \\\n                $(srcdir)/appstream-glib.gresource.xml\nas-resources.h: appstream-glib.gresource.xml                    \\\n                as-stock-icons.txt                              \\\n                as-license-ids.txt                              \\\n                as-blacklist-ids.txt                            \\\n                as-category-ids.txt                             \\\n                as-environment-ids.txt\n        $(AM_V_GEN)                                             \\\n        glib-compile-resources                                  \\\n                --sourcedir=$(srcdir)                           \\\n                --sourcedir=$(top_builddir)/data                \\\n                --target=$@                                     \\\n                --generate-header                               \\\n                --c-name as                                     \\\n                $(srcdir)/appstream-glib.gresource.xml\n\nBUILT_SOURCES =                                                 \\\n        as-resources.c                                          \\\n        as-resources.h\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">asresources = gnome.compile_resources(\n  'as-resources', 'appstream-glib.gresource.xml',\n  source_dir : '.',\n  c_name : 'as')\n</code></pre>\n<h3 id=\"headers\">Headers</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">libappstream_glib_includedir = $(includedir)/libappstream-glib\nlibappstream_glib_include_HEADERS =                             \\\n        appstream-glib.h                                        \\\n        as-app.h                                                \\\n        as-bundle.h                                             \\\n        as-enums.h                                              \\\n        as-icon.h                                               \\\n        as-image.h                                              \\\n        as-inf.h                                                \\\n        as-node.h                                               \\\n        as-problem.h                                            \\\n        as-provide.h                                            \\\n        as-release.h                                            \\\n        as-screenshot.h                                         \\\n        as-store.h                                              \\\n        as-tag.h                                                \\\n        as-utils.h                                              \\\n        as-version.h\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">headers = [\n  'appstream-glib.h',\n  'as-app.h',\n  'as-bundle.h',\n  'as-enums.h',\n  'as-icon.h',\n  'as-image.h',\n  'as-inf.h',\n  'as-node.h',\n  'as-problem.h',\n  'as-provide.h',\n  'as-release.h',\n  'as-screenshot.h',\n  'as-store.h',\n  'as-tag.h',\n  'as-utils.h',\n  'as-version.h']\ninstall_headers(headers, subdir : 'libappstream-glib')\n</code></pre>\n<h3 id=\"libraries\">Libraries</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">lib_LTLIBRARIES =                                               \\\n        libappstream-glib.la\nlibappstream_glib_la_SOURCES =                                  \\\n        as-app.c                                                \\\n        as-app-desktop.c                                        \\\n        as-app-inf.c                                            \\\n        as-app-private.h                                        \\\n        as-app-validate.c                                       \\\n        as-bundle.c                                             \\\n        as-bundle-private.h                                     \\\n        as-cleanup.h                                            \\\n        as-enums.c                                              \\\n        as-icon.c                                               \\\n        as-icon-private.h                                       \\\n        as-image.c                                              \\\n        as-image-private.h                                      \\\n        as-inf.c                                                \\\n        as-inf.h                                                \\\n        as-node.c                                               \\\n        as-node-private.h                                       \\\n        as-problem.c                                            \\\n        as-problem.h                                            \\\n        as-provide.c                                            \\\n        as-provide-private.h                                    \\\n        as-release.c                                            \\\n        as-release-private.h                                    \\\n        as-resources.c                                          \\\n        as-resources.h                                          \\\n        as-screenshot.c                                         \\\n        as-screenshot-private.h                                 \\\n        as-store.c                                              \\\n        as-tag.c                                                \\\n        as-utils.c                                              \\\n        as-utils-private.h                                      \\\n        as-version.h                                            \\\n        as-yaml.c                                               \\\n        as-yaml.h\n\nlibappstream_glib_la_LIBADD =                                   \\\n        $(GLIB_LIBS)                                            \\\n        $(GDKPIXBUF_LIBS)                                       \\\n        $(LIBARCHIVE_LIBS)                                      \\\n        $(SOUP_LIBS)                                            \\\n        $(YAML_LIBS)\n\nlibappstream_glib_la_LDFLAGS =                                  \\\n        -version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE)    \\\n        -export-dynamic                                         \\\n        -no-undefined                                           \\\n        -export-symbols-regex '^as_.*'\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">sources = [\n  'as-app.c',\n  'as-app-desktop.c',\n  'as-app-inf.c',\n  'as-app-private.h',\n  'as-app-validate.c',\n  'as-bundle.c',\n  'as-bundle-private.h',\n  'as-cleanup.h',\n  'as-enums.c',\n  'as-icon.c',\n  'as-icon-private.h',\n  'as-image.c',\n  'as-image-private.h',\n  'as-inf.c',\n  'as-inf.h',\n  'as-node.c',\n  'as-node-private.h',\n  'as-problem.c',\n  'as-problem.h',\n  'as-provide.c',\n  'as-provide-private.h',\n  'as-release.c',\n  'as-release-private.h',\n  asresources,\n  'as-screenshot.c',\n  'as-screenshot-private.h',\n  'as-store.c',\n  'as-tag.c',\n  'as-utils.c',\n  'as-utils-private.h',\n  'as-version.h',\n  'as-yaml.c',\n  'as-yaml.h']\n\ndeps = [glib, gdkpixbuf, libarchive, soup, yaml]\n\nmapfile = 'appstream-glib.map'\nvflag = '-Wl,--version-script,@0@/@1@'.format(meson.current_source_dir(), mapfile)\nasglib = shared_library(\n  'appstream-glib', sources,\n  soversion : lt_current,\n  version : lt_version,\n  dependencies : deps,\n  include_directories : include_directories('@0@/..'.format(meson.current_build_dir())),\n  link_args : ['-Wl,--no-undefined', vflag],\n  link_depends : mapfile,\n  install : true)\n</code></pre>\n<p><code>appstream-glib.map</code>:</p>\n<pre><code>{\nglobal:\n    as_*;\nlocal:\n    *; \n};\n</code></pre>\n<h3 id=\"custom-targets\">Custom targets</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">if HAVE_GPERF\nas-tag-private.h: as-tag.gperf\n        $(AM_V_GEN) gperf &lt; $&lt; &gt; $@\n\nlibappstream_glib_la_SOURCES += as-tag-private.h\nBUILT_SOURCES += as-tag-private.h\nendif\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">if gperf.found()\n  astagpriv = custom_target('gperf as-tag',\n                            output : 'as-tag-private.h',\n                            input : 'as-tag.gperf',\n                            command : [gperf, '@INPUT@', '--output-file', '@OUTPUT@'])\n  sources = sources + [astagpriv]\nendif\n</code></pre>\n<h3 id=\"global-cflags\">Global CFLAGS</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">AM_CPPFLAGS =                                                   \\\n        -DAS_COMPILATION                                        \\\n        -DLOCALSTATEDIR=\\\"\"$(localstatedir)\"\\\"                  \\\n        -DG_LOG_DOMAIN=\\\"As\\\"\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">add_global_arguments('-DG_LOG_DOMAIN=\"As\"', language : 'c')\nadd_global_arguments('-DAS_COMPILATION', language : 'c')\nadd_global_arguments('-DLOCALSTATEDIR=\"/var\"', language : 'c')\n</code></pre>\n<h3 id=\"tests\">Tests</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">check_PROGRAMS =                                                \\\n        as-self-test\nas_self_test_SOURCES =                                          \\\n        as-self-test.c\nas_self_test_LDADD =                                            \\\n        $(GLIB_LIBS)                                            \\\n        $(GDKPIXBUF_LIBS)                                       \\\n        $(LIBARCHIVE_LIBS)                                      \\\n        $(SOUP_LIBS)                                            \\\n        $(YAML_LIBS)                                            \\\n        $(lib_LTLIBRARIES)\nas_self_test_CFLAGS = -DTESTDATADIR=\\\"\"$(top_srcdir)/data/tests\"\\\"\n\nTESTS = as-self-test\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">selftest = executable(\n  'as-self-test', 'as-self-test.c',\n  include_directories : include_directories('@0@/..'.format(meson.current_build_dir())),\n  dependencies : deps,\n  c_args : '-DTESTDATADIR=\"@0@/../data/tests\"'.format(meson.current_source_dir()),\n  link_with : asglib)\ntest('as-self-test', selftest)\n</code></pre>\n<h3 id=\"gobject-introspection\">GObject Introspection</h3>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">introspection_sources =                                         \\\n        as-app.c                                                \\\n        as-app-validate.c                                       \\\n        as-app.h                                                \\\n        as-bundle.c                                             \\\n        as-bundle.h                                             \\\n        as-enums.c                                              \\\n        as-enums.h                                              \\\n        as-icon.c                                               \\\n        as-icon.h                                               \\\n        as-image.c                                              \\\n        as-image.h                                              \\\n        as-inf.c                                                \\\n        as-inf.h                                                \\\n        as-node.c                                               \\\n        as-node.h                                               \\\n        as-problem.c                                            \\\n        as-problem.h                                            \\\n        as-provide.c                                            \\\n        as-provide.h                                            \\\n        as-release.c                                            \\\n        as-release.h                                            \\\n        as-screenshot.c                                         \\\n        as-screenshot.h                                         \\\n        as-store.c                                              \\\n        as-store.h                                              \\\n        as-tag.c                                                \\\n        as-tag.h                                                \\\n        as-utils.c                                              \\\n        as-utils.h                                              \\\n        as-version.h\n\nAppStreamGlib-1.0.gir: libappstream-glib.la\nAppStreamGlib_1_0_gir_INCLUDES = GObject-2.0 Gio-2.0 GdkPixbuf-2.0\nAppStreamGlib_1_0_gir_CFLAGS = $(AM_CPPFLAGS)\nAppStreamGlib_1_0_gir_SCANNERFLAGS = --identifier-prefix=As \\\n                                --symbol-prefix=as_ \\\n                                --warn-all \\\n                                --add-include-path=$(srcdir)\nAppStreamGlib_1_0_gir_EXPORT_PACKAGES = appstream-glib\nAppStreamGlib_1_0_gir_LIBS = libappstream-glib.la\nAppStreamGlib_1_0_gir_FILES = $(introspection_sources)\nINTROSPECTION_GIRS += AppStreamGlib-1.0.gir\n\ngirdir = $(datadir)/gir-1.0\ngir_DATA = $(INTROSPECTION_GIRS)\n\ntypelibdir = $(libdir)/girepository-1.0\ntypelib_DATA = $(INTROSPECTION_GIRS:.gir=.typelib)\n\nCLEANFILES += $(gir_DATA) $(typelib_DATA)\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">introspection_sources = [\n  'as-app.c',\n  'as-app-validate.c',\n  'as-app.h',\n  'as-bundle.c',\n  'as-bundle.h',\n  'as-enums.c',\n  'as-enums.h',\n  'as-icon.c',\n  'as-icon.h',\n  'as-image.c',\n  'as-image.h',\n  'as-inf.c',\n  'as-inf.h',\n  'as-node.c',\n  'as-node.h',\n  'as-problem.c',\n  'as-problem.h',\n  'as-provide.c',\n  'as-provide.h',\n  'as-release.c',\n  'as-release.h',\n  'as-screenshot.c',\n  'as-screenshot.h',\n  'as-store.c',\n  'as-store.h',\n  'as-tag.c',\n  'as-tag.h',\n  'as-utils.c',\n  'as-utils.h']\n  'as-version.h']\n\ngnome.generate_gir(asglib,\n  sources : introspection_sources,\n  nsversion : '1.0',\n  namespace : 'AppStreamGlib',\n  symbol_prefix : 'as_',\n  identifier_prefix : 'As',\n  export_packages : 'appstream-glib',\n  includes : ['GObject-2.0', 'Gio-2.0', 'GdkPixbuf-2.0'],\n  install : true\n)\n</code></pre>\n<h3 id=\"gsettings\">GSettings</h3>\n<p><code>configure.ac</code>:</p>\n<pre><code class=\"language-sh\">GLIB_GSETTINGS\n</code></pre>\n<p><code>Makefile.am</code>:</p>\n<pre><code class=\"language-make\">gsettings_SCHEMAS = foo.gschema.xml\n@GSETTINGS_RULES@\n</code></pre>\n<p><code>meson.build</code>:</p>\n<pre><code class=\"language-meson\">install_data('foo.gschema.xml', install_dir: join_paths(get_option('datadir'), 'glib-2.0', 'schemas'))\nmeson.add_install_script('meson_post_install.py')\n</code></pre>\n<p><code>meson_post_install.py</code>:</p>\n<pre><code class=\"language-python\">#!/usr/bin/env python3\n\nimport os\nimport subprocess\n\nschemadir = os.path.join(os.environ['MESON_INSTALL_PREFIX'], 'share', 'glib-2.0', 'schemas')\n\nif not os.environ.get('DESTDIR'):\n\tprint('Compiling gsettings schemas...')\n\tsubprocess.call(['glib-compile-schemas', schemadir])\n</code></pre>\n\n</div>\n\n\n        "});